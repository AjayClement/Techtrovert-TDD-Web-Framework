package com.ttt.uiutils;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotInteractableException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.util.concurrent.Uninterruptibles;
import com.ttt.commonutils.PropertyManager;
import com.ttt.driverutils.UiDriverManager;


public class UiWaitHandler {

	private static long secondsElementWait = PropertyManager.getGlobalElementWaitTimeProperty();

	private UiWaitHandler() {
		
	}
	
	
	public static void pageWait() {
		UiDriverManager.getDriver().manage().timeouts().pageLoadTimeout(Duration.ofSeconds(PropertyManager.getGlobalPageWaitTimeProperty()));
	 
	}
	
	public static  WebElement waitUntilClickable(By ele, boolean assertFlag) {
		
		 WebElement targetEle =  null;
		  try {
		    	targetEle  =  new WebDriverWait(UiDriverManager.getDriver(), Duration.ofSeconds(secondsElementWait)).until(
					              ExpectedConditions.elementToBeClickable(ele));
		  }catch(Exception  e){
			   if(assertFlag) {
				    StackTraceElement[] s = new Throwable().getStackTrace();
				    StackTraceElement line = s[3];
				    StackTraceElement classLoc = s[0];
				    StackTraceElement methodName = s[1];
				   				    
			 	   throw new ElementNotInteractableException("\nException Occured {"+e+"}- please check the Locator and DOM"
			 	   		+ "\nLine.No: "+line
			 			+ "\nMethodName: "+methodName
			 			+ "\nClassName: "+classLoc
			 	   		+ "\nelement: ExpectedConditions.elementToBeClickable("+ele+"),"
			 	   		, e);
			   }else {
				   e.printStackTrace();
			   }
		  }
		  return targetEle;
	}
	
	public static  WebElement waitUntilElementVisible(By ele, boolean assertFlag) {
		  WebElement targetEle =  null;
		  try {
		    	targetEle  =  new WebDriverWait(UiDriverManager.getDriver(), Duration.ofSeconds(secondsElementWait)).until(
					              ExpectedConditions.visibilityOfElementLocated(ele));
		  }catch(Exception e){
			if(assertFlag) {
				StackTraceElement[] s = new Throwable().getStackTrace();
			    StackTraceElement line = s[3];
			    StackTraceElement classLoc = s[0];
			    StackTraceElement methodName = s[1];
					    
		 	   throw new NoSuchElementException("\nException Occured- please check the Locator and DOM"
		 	   		+ "\nLine.No: "+line
		 			+ "\nMethodName: "+methodName
		 			+ "\nClassName: "+classLoc
		 	   		+ "\nelement: ExpectedConditions.visibilityOfElementLocated("+ele+"),"
		 	   		, e);
		 	   }else {
				e.printStackTrace();
			   }
		  }
		  return targetEle;
	}
	
	public static void unInteruptedSleep() {
	   Uninterruptibles.sleepUninterruptibly(Duration.ofSeconds(2));	
	}
	
	
}
